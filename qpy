#!/usr/bin/python
# qpy - queueing manager for qpy
#
# 29 May 2015 - Pradipta and Yuri
from multiprocessing.connection import Client
from time import sleep
import os
import sys
import subprocess
import re
import threading

from qpy_general_variables import *

home_dir = os.environ['HOME']
user = os.environ['USER']
qpy_dir = os.path.expanduser( '~/.qpy/')
qpy_source_dir = os.path.dirname( os.path.abspath( __file__)) + '/'
port_file = qpy_dir + '/port'
key_file = qpy_dir + '/conn_key'
tutorial_file = qpy_source_dir + '/tutorial'

scr_dir = '/scratch/'+ user

qpy_finish_command = ['qpy', 'finish', '>', '/dev/null', '2>', '/dev/null']
qpy_master_command = ['python', qpy_source_dir+'qpy-master.py', '-c', 'linux4', '-m', '>', '/dev/null', '2>', '/dev/null']

# Return a list with all children and grand-children from pid
# The dict parent_of shows the parents of all processes
def get_all_children( pid, parent_of):
    cur_child = []
    for p in parent_of:
        if (parent_of[p] == pid):
            cur_child.append(p)
    all_children = []
    for c in cur_child:
        all_children = get_all_children( c, parent_of)
    all_children.extend( cur_child)
    return all_children

# '--options' are to be called only by qpy-master, not by the users
if (len( sys.argv) > 1):
    if (sys.argv[1] == '--alloc'):
        sleep( float( sys.argv[2]))
        exit()

    if (sys.argv[1] == '--init'):
        if (os.path.isdir( scr_dir)):
            command = 'rm -rf ' + scr_dir + '/*'
        else:
            command = 'mkdir ' + scr_dir
        subprocess.call( command, shell = True)
        print "Success on qpy init!"
        exit()

    if (sys.argv[1] == '--term'):
        command = 'rm -rf ' + scr_dir
        subprocess.call( command, shell = True)
        exit()

    if (sys.argv[1] == '--jobkill'):
        job_id = sys.argv[2]
        command = 'ps -fu ' + user
        kill_job_ps = subprocess.Popen(command,
                                       shell = True,
                                       stdout = subprocess.PIPE,
                                       stderr = subprocess.PIPE)
        ps_out = kill_job_ps.stdout.readlines()

        # Get calling PID and parents associations:
        grand_PID = ''
        parents = {}
        for l in ps_out:
            new_pid = l.split()
            parents[new_pid[1]] = new_pid[2]
            re_res = re.search('export QPY_JOB_ID=' + job_id + ';', l)
            if (re_res):
                grand_PID = new_pid[1]

        pid_kill = get_all_children( grand_PID, parents)
        pid_kill.reverse()
        for i in pid_kill:
            kill_job = subprocess.call(['kill', '-9', i])
            print 'Killing PID ' + i

        exit()
# end of '--options'


# Return a list of integers, described by the string X, as following:
#
# '1,2,3'    -> [1,2,3]
# '1-3'      -> [1,2,3]
# '1-3,6-10' -> [1,2,3,6,7,8,9,10]
#
def string_to_int_list( string):
    res = []
    for entry in string.split(',') :
        range_ = [ int(num) for num in entry.split('-')] # raises ValueError on 3-
        if (len(range_) not in [1,2] ):
            raise IndexError("No multivalue ranges")
        res.extend( range( range_[0], range_[-1]+1)) #works correctly for len(range_ ) == 1
    return res


job_status = ['queue', 'running', 'done', 'killed', 'undone']

keywords={'sub':       (JOBTYPE_SUB       , 'Submit a job. Arguments: the job command'),
          'check':     (JOBTYPE_CHECK     , 'Check the jobs. Arguments: the desired job status'),
          'kill':      (JOBTYPE_KILL      , 'Kill jobs. Argument: the jobs id'),
          'finish':    (JOBTYPE_FINISH    , 'Finish the master execution. No arguments'),
          'nodes':     (JOBTYPE_NODES     , 'Change the maximum number of nodes. Argument: the desired value'),
          'maxJobs':   (JOBTYPE_MAXJOBS   , 'Change the maximum number of jobs per node. Argument: the desired value'),
          'config':    (JOBTYPE_CONFIG    , 'Show the current configuration. No arguments'),
          'clean':     (JOBTYPE_CLEAN     , 'Remove finished jobs from the list. Arguments: the jobs id'),
          'tutorial':  (JOBTYPE_TUTORIAL  , 'Run the qpy tutorial. Arguments: optional: a qpy option'),
          'status':    (JOBTYPE_STATUS    , 'Show current status. No arguments'),
          'restart':   (JOBTYPE_RESTART   , 'Restart qpy-master. No arguments'),
          'ctrlQueue': (JOBTYPE_CTRLQUEUE , 'Fine control over the queue. Arguments: see tutorial')
          }


try:
    option = keywords[sys.argv[1]][0]
except:
    str_len = 0
    for opt in keywords:
        if (str_len < len( opt)):
            str_len = len( opt)
    format_spc = '{0:' + str( str_len+1) + 's}'
    usage_msg =  'Usage: ' + sys.argv[0] +  ' <option> [<arguments>].\n'
    usage_msg += 'Options:'
    for opt in keywords:
        usage_msg += '\n  ' + format_spc.format( opt+':') + ' ' + keywords[opt][1]
    sys.exit( usage_msg)

start_qpy_master = option == JOBTYPE_RESTART
if (start_qpy_master):
    option = JOBTYPE_FINISH

# Get arguments, according to the option
arguments = ()

# Submit a job
if (option == JOBTYPE_SUB):
    job = ''
    for i in sys.argv[2:]:
        job += ' ' + i
    arguments = [job, os.getcwd()]

# Check jobs
if (option == JOBTYPE_CHECK):
    arguments = {}
    for x in sys.argv[2:]:
        if x in job_status:
            if ('status' in arguments):
                arguments['status'].append( x)
            else:
                arguments['status'] = [x]
        else:
            try:
                new_jobids = string_to_int_list( x)
            except:
                sys.exit( 'Unknown pattern for checking jobs: ' + x)
            if ('job_id' in arguments):
                arguments['job_id'].extend( new_jobids)
            else:
                arguments['job_id'] = new_jobids

# Change max_nodes, add/remove nodes
elif (option == JOBTYPE_NODES):
    try:
        arguments = int( sys.argv[2])
    except:
        try:
            arguments = sys.argv[2:]
        except:
            arguments = ()

# Change max_jobs
elif (option == JOBTYPE_MAXJOBS):
    try:
        arguments = [int( sys.argv[2])]
    except:
        try:
            sys.exit( 'First argument for maxJobs must be an integer: ' + sys.argv[2])
        except:
            sys.exit( 'maxJobs require an integer as argument.')
    arguments.extend( sys.argv[3:])

# Config
elif (option == JOBTYPE_CONFIG):
    if (len( sys.argv) == 4):
        arguments = ( sys.argv[2], sys.argv[3])
    elif (len( sys.argv) != 2):
        sys.exit( 'Give, optionally, a pair <key> <value> for the config option')

# Kill jobs or clean list
elif (option == JOBTYPE_KILL or option == JOBTYPE_CLEAN):
    if option == JOBTYPE_KILL:
        status_bound = (0,2)
    else:
        status_bound = (2,5)
    arguments = []
    for x in sys.argv[2:]:
        try:
            new_range = string_to_int_list( x)
            arguments.extend( new_range)
        except:
            if (x == 'all' or x in job_status[status_bound[0]:status_bound[1]]):
                arguments.append( x)
            else:
                sys.exit( 'Range with wrong format or invalid status: ' + x)

    arguments = list( set( arguments))

# Control queue
elif (option == JOBTYPE_CTRLQUEUE):
    if (len( sys.argv) < 3):
        sys.exit( 'Give the queue control type.')
    else:
        if (sys.argv[2] == 'jump'):
            new_range = []
            for x in sys.argv[3:-1]:
                try:
                    new_range.extend( string_to_int_list( x))
                except:
                    sys.exit( 'Range with wrong format: ' + x)
            if (not( new_range)):
                    sys.exit( 'Give the jobs to change position.')
            try:
                pos = int( sys.argv[-1])
            except:
                if (sys.argv[-1] == 'begin'):
                    pos = 0
                elif (sys.argv[-1] == 'end'):
                    pos = -1
                else:
                    sys.exit( 'Invalid jump position: ' + sys.argv[-1])
            arguments = ('jump', new_range, pos)

        else:
            arguments = sys.argv[2:]

# The qpy tutorial
elif (option == JOBTYPE_TUTORIAL):
    
    pattern = ''
    for i in sys.argv[2:3]:
        pattern += i
    for i in sys.argv[3:]:
        pattern += ' ' + i

    if (pattern in keywords):
        pattern = '--pattern "# ' + pattern + '"'
    elif (pattern):
        pattern = '--pattern "' + pattern + '"'

    command = 'less '  + pattern + ' ' + tutorial_file
    try:
        subprocess.call( command, shell = True)
    except:
        sys.exit( 'Error when loading the tutorial.')
    exit()


def kill_master_instances():
    pattern = ' '.join( qpy_master_command)
    ps = subprocess.Popen(["ps", "-fu", user],
                          shell=False,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    std_outerr = ps.communicate()
    ps_stdout = std_outerr[0].split( '\n')
    for l in ps_stdout:
        if (pattern in l):
            pid = l.split()[1]
            kill = subprocess.Popen(["kill", pid],
                                    shell=False,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
            sys.stdout.write( 'Killing older qpy-master instance: ' + pid + '\n')
            std_outerr = kill.communicate()


def start_master_driver():
    sys.stdout.write( "Starting qpy-master driver.\n")
    sleep( 1)
#    kill_master_instances()
    subprocess.Popen( qpy_master_command, shell = False)
    exit()



try:
    f = open( port_file, 'r')
    port = int( f.read())
    f.close()
    f = open( key_file, 'r')
    conn_key = f.read()
    f.close()
except:
    if (start_qpy_master):
        start_master_driver()
    else:
        sys.exit( 'Problem to get the connection information. Are you sure that qpy-master is running?')

address = 'localhost'

class try_connection( threading.Thread):
    def __init__( self):
        threading.Thread.__init__( self)
        self.conn = None
        self.done = threading.Event()

    def run( self):
        try:
            self.conn = Client( (address, port), authkey=conn_key)
            self.done.set()
        except:
            self.done.clear()

M = try_connection()
M.daemon = True
M.start()
M.done.wait( 3.0)
if (not( M.done.is_set())):
    if (start_qpy_master):
        os.remove( port_file)
        start_master_driver()
    sys.exit( 'Time for connection exceeded. Are you sure that qpy-master is running?')

conn = M.conn
conn.send( (option, arguments))
try:
    sys.stdout.write( conn.recv())
except:
    sys.exit( 'Problem when getting message from qpy-master. Your qpy-master might be broken.\nTry to run again or contact the qpy-team.')
conn.close()

if (start_qpy_master):
    start_master_driver()
